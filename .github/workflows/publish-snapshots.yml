name: Publish Snapshots

on:
  push:
    branches: 
      - main
      - master
    paths:
      - 'java-sdk/**'
  workflow_dispatch:

jobs:
  publish-snapshots:
    # Only run for snapshot publishing, not when release-please creates releases
    if: "!contains(github.event.head_commit.message, 'chore(main): release')"
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'

    - name: Cache Maven dependencies
      uses: actions/cache@v4
      with:
        path: ~/.m2
        key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
        restore-keys: ${{ runner.os }}-m2

    - name: Configure Maven settings for GitHub Packages
      run: |
        mkdir -p ~/.m2
        cat > ~/.m2/settings.xml << EOF
        <?xml version="1.0" encoding="UTF-8"?>
        <settings xmlns="http://maven.apache.org/SETTINGS/1.0.0"
                  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
                  xsi:schemaLocation="http://maven.apache.org/SETTINGS/1.0.0
                                      http://maven.apache.org/xsd/settings-1.0.0.xsd">
          <servers>
            <server>
              <id>github</id>
              <username>\${env.GITHUB_ACTOR}</username>
              <password>\${env.GITHUB_TOKEN}</password>
            </server>
          </servers>
        </settings>
        EOF

    - name: Detect changed modules
      id: changes
      run: |
        # Define module dependency order (dependencies first)
        MODULES=(
          "java-sdk/packages/core"
          "java-sdk/packages/client" 
          "java-sdk/packages/http"
          "java-sdk/utils/json"
          "java-sdk/packages/ok-http"
          "java-sdk/packages/spring-http"
          "java-sdk/integrations/spring-ai"
        )
        
        CHANGED_MODULES=()
        
        for module in "${MODULES[@]}"; do
          if ! git diff --quiet HEAD~1 HEAD -- "$module/" ; then
            echo "Changes detected in $module"
            CHANGED_MODULES+=("$module")
          fi
        done
        
        # Convert array to JSON for matrix
        printf -v joined '%s,' "${CHANGED_MODULES[@]}"
        echo "modules=[\"${joined%,}\"]" | sed 's/","/", "/g' >> $GITHUB_OUTPUT

    - name: Build and install dependencies locally
      run: |
        # Always build core first as other modules depend on it
        echo "Building core module..."
        cd java-sdk/packages/core
        CURRENT_VERSION=$(mvn help:evaluate -Dexpression=project.version -q -DforceStdout)
        BASE_VERSION=${CURRENT_VERSION%-SNAPSHOT}
        BUILD_VERSION="${BASE_VERSION}-SNAPSHOT-${{ github.run_number }}"
        mvn versions:set -DnewVersion=$BUILD_VERSION -DgenerateBackupPoms=false
        mvn clean install -DskipTests
        
        # Build other base modules that others depend on
        echo "Building client module..."
        cd ../../packages/client
        CURRENT_VERSION=$(mvn help:evaluate -Dexpression=project.version -q -DforceStdout)
        BASE_VERSION=${CURRENT_VERSION%-SNAPSHOT}
        BUILD_VERSION="${BASE_VERSION}-SNAPSHOT-${{ github.run_number }}"
        mvn versions:set -DnewVersion=$BUILD_VERSION -DgenerateBackupPoms=false
        mvn clean install -DskipTests
        
        echo "Building http module..."
        cd ../http
        CURRENT_VERSION=$(mvn help:evaluate -Dexpression=project.version -q -DforceStdout)
        BASE_VERSION=${CURRENT_VERSION%-SNAPSHOT}
        BUILD_VERSION="${BASE_VERSION}-SNAPSHOT-${{ github.run_number }}"
        mvn versions:set -DnewVersion=$BUILD_VERSION -DgenerateBackupPoms=false
        mvn clean install -DskipTests
        
        echo "Building json module..."
        cd ../../utils/json
        CURRENT_VERSION=$(mvn help:evaluate -Dexpression=project.version -q -DforceStdout)
        BASE_VERSION=${CURRENT_VERSION%-SNAPSHOT}
        BUILD_VERSION="${BASE_VERSION}-SNAPSHOT-${{ github.run_number }}"
        mvn versions:set -DnewVersion=$BUILD_VERSION -DgenerateBackupPoms=false
        mvn clean install -DskipTests

    - name: Test and publish changed modules
      run: |
        MODULES=(
          "java-sdk/packages/core"
          "java-sdk/packages/client" 
          "java-sdk/packages/http"
          "java-sdk/utils/json"
          "java-sdk/packages/ok-http"
          "java-sdk/packages/spring-http"
          "java-sdk/integrations/spring-ai"
        )
        
        for module in "${MODULES[@]}"; do
          if ! git diff --quiet HEAD~1 HEAD -- "$module/" ; then
            echo "Testing and publishing $module..."
            cd "$module"
            
            # Run tests
            mvn test
            
            # Deploy to GitHub Packages
            mvn deploy -DskipTests
            
            cd - > /dev/null
          else
            echo "No changes in $module, skipping..."
          fi
        done
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        GITHUB_ACTOR: ${{ github.actor }}