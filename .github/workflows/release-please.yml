name: Release Please

on:
  push:
    branches:
      - main

permissions:
  contents: write
  pull-requests: write
  issues: write
  packages: write

jobs:
  release-please:
    # Only skip the dependency update commits, but allow release commits to trigger publishing
    if: |
      !contains(github.event.head_commit.message, 'update inter-module dependencies') &&
      !contains(github.event.head_commit.message, 'build(deps)') &&
      !contains(github.event.head_commit.message, '[skip ci]') &&
      github.actor != 'github-actions[bot]'
    runs-on: ubuntu-latest
    outputs:
      releases_created: ${{ steps.release.outputs.releases_created }}
      paths_released: ${{ steps.release.outputs.paths_released }}
    steps:
      - name: Run release-please
        id: release
        # Only run release-please if this is NOT a release commit
        if: |
          !contains(github.event.head_commit.message, 'chore: release') &&
          !contains(github.event.head_commit.message, 'chore(main): release')
        uses: googleapis/release-please-action@v4
        with:
          config-file: java-sdk/.release-please-config.json
          manifest-file: java-sdk/.release-please-manifest.json

  publish:
    runs-on: ubuntu-latest
    needs: release-please
    # Run if release-please created releases OR if this is a release commit
    if: |
      needs.release-please.outputs.releases_created == 'true' ||
      contains(github.event.head_commit.message, 'chore: release') ||
      contains(github.event.head_commit.message, 'chore(main): release')
    strategy:
      matrix:
        # Use paths from release-please if available, otherwise publish all packages
        path: ${{ fromJson(needs.release-please.outputs.paths_released || '["java-sdk/packages/core", "java-sdk/packages/client", "java-sdk/packages/http"]') }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Set up JDK
        uses: actions/setup-java@v4
        with:
          java-version: '11'
          distribution: 'temurin'
          server-id: github
          server-username: MAVEN_USERNAME
          server-password: MAVEN_PASSWORD
          
      - name: Cache Maven dependencies
        uses: actions/cache@v3
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2
          
      - name: Update dependency versions
        # Only do this if release-please actually ran and created releases
        if: needs.release-please.outputs.releases_created == 'true'
        run: |
          MODULE_PATH="${{ matrix.path }}"
          
          if [ -f "$MODULE_PATH/pom.xml" ]; then
            echo "Processing module at $MODULE_PATH"
            
            cd "$MODULE_PATH"
            NEW_VERSION=$(mvn help:evaluate -Dexpression=project.version -q -DforceStdout)
            MODULE_ARTIFACT=$(mvn help:evaluate -Dexpression=project.artifactId -q -DforceStdout)
            
            echo "Module $MODULE_ARTIFACT released with version $NEW_VERSION"
            
            cd ../../..
            find java-sdk/packages -name "pom.xml" -not -path "$MODULE_PATH/*" | while read pom; do
              echo "Checking $pom for dependencies on $MODULE_ARTIFACT"
              if grep -q "<artifactId>$MODULE_ARTIFACT</artifactId>" "$pom"; then
                echo "Updating dependency in $pom"
                mvn versions:use-dep-version \
                  -Dincludes=io.workm8.ag-ui:$MODULE_ARTIFACT \
                  -DdepVersion=$NEW_VERSION \
                  -DforceVersion=true \
                  -f "$pom" || true
              fi
            done
          fi
          
      - name: Build and test
        run: |
          cd "${{ matrix.path }}"
          mvn clean verify
          
      - name: Publish to GitHub Packages
        run: |
          cd "${{ matrix.path }}"
          mvn deploy -DskipTests
        env:
          MAVEN_USERNAME: ${{ github.actor }}
          MAVEN_PASSWORD: ${{ secrets.GITHUB_TOKEN }}

  update-snapshots:
    runs-on: ubuntu-latest
    needs: [release-please, publish]
    # Only run this for new releases (not when publishing existing releases)
    if: needs.release-please.outputs.releases_created == 'true'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          
      - name: Set up JDK
        uses: actions/setup-java@v4
        with:
          java-version: '11'
          distribution: 'temurin'
          
      - name: Configure Git
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          
      - name: Update inter-module dependencies
        run: |
          PATHS_RELEASED='${{ needs.release-please.outputs.paths_released }}'
          echo "Released paths: $PATHS_RELEASED"
          
          echo "$PATHS_RELEASED" | jq -r '.[]' | while read module_path; do
            if [ -f "$module_path/pom.xml" ]; then
              cd "$module_path"
              MODULE_ARTIFACT=$(mvn help:evaluate -Dexpression=project.version -q -DforceStdout)
              NEW_VERSION=$(mvn help:evaluate -Dexpression=project.version -q -DforceStdout)
              cd ../../..
              
              find java-sdk/packages -name "pom.xml" -not -path "$module_path/*" | while read pom; do
                if grep -q "<artifactId>$MODULE_ARTIFACT</artifactId>" "$pom"; then
                  mvn versions:use-dep-version \
                    -Dincludes=io.workm8.ag-ui:$MODULE_ARTIFACT \
                    -DdepVersion=$NEW_VERSION \
                    -DforceVersion=true \
                    -f "$pom" || true
                fi
              done
            fi
          done
          
      - name: Commit dependency updates
        run: |
          if git diff --quiet; then
            echo "No changes to commit"
          else
            git add -A
            # Add [skip ci] to prevent triggering the workflow again
            git commit -m "chore: update inter-module dependencies after release [skip ci]"
            git push origin main
          fi