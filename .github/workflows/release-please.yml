name: Release Please

on:
  push:
    branches:
      - main
      - master
    paths:
      - 'java-sdk/**'

permissions:
  contents: write
  pull-requests: write

jobs:
  release-please:
    runs-on: ubuntu-latest
    outputs:
      releases_created: ${{ steps.release.outputs.releases_created }}
      paths_released: ${{ steps.release.outputs.paths_released }}
    steps:
      - name: Release Please
        id: release
        uses: googleapis/release-please-action@v4
        with:
          # This should match the default branch
          default-branch: main
          # Use the manifest-driven approach for multiple packages
          config-file: java-sdk/.release-please-config.json
          manifest-file: java-sdk/.release-please-manifest.json

  # Job to publish packages when releases are created
  publish-packages:
    needs: release-please
    if: ${{ needs.release-please.outputs.releases_created == 'true' }}
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    strategy:
      matrix:
        # Parse the released paths and create a job for each
        path: ${{ fromJson(needs.release-please.outputs.paths_released) }}

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'

    - name: Cache Maven dependencies
      uses: actions/cache@v4
      with:
        path: ~/.m2
        key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
        restore-keys: ${{ runner.os }}-m2

    - name: Configure Maven settings for GitHub Packages
      run: |
        mkdir -p ~/.m2
        cat > ~/.m2/settings.xml << EOF
        <?xml version="1.0" encoding="UTF-8"?>
        <settings xmlns="http://maven.apache.org/SETTINGS/1.0.0"
                  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
                  xsi:schemaLocation="http://maven.apache.org/SETTINGS/1.0.0
                                      http://maven.apache.org/xsd/settings-1.0.0.xsd">
          <servers>
            <server>
              <id>github</id>
              <username>\${env.GITHUB_ACTOR}</username>
              <password>\${env.GITHUB_TOKEN}</password>
            </server>
          </servers>
        </settings>
        EOF

    - name: Get module info
      id: module-info
      run: |
        # Extract module name from path (remove java-sdk/ prefix)
        MODULE_PATH="${{ matrix.path }}"
        MODULE_PATH_NO_PREFIX=${MODULE_PATH#java-sdk/}
        MODULE_NAME=$(basename "$MODULE_PATH_NO_PREFIX")
        echo "module_name=$MODULE_NAME" >> $GITHUB_OUTPUT
        echo "module_path=$MODULE_PATH" >> $GITHUB_OUTPUT
        echo "module_path_no_prefix=$MODULE_PATH_NO_PREFIX" >> $GITHUB_OUTPUT

    - name: Run tests for module
      run: |
        cd "${{ steps.module-info.outputs.module_path }}"
        mvn clean test

    - name: Build and publish module
      run: |
        cd "${{ steps.module-info.outputs.module_path }}"
        mvn clean deploy -DskipTests
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        GITHUB_ACTOR: ${{ github.actor }}

    - name: Create release assets
      run: |
        # Create a directory for release assets
        mkdir -p release-assets
        
        # Copy built JARs from this specific module
        find "${{ steps.module-info.outputs.module_path }}/target" -name "*.jar" -not -path "*/surefire-reports/*" | while read jar; do
          # Rename jar to include module name for clarity
          filename=$(basename "$jar")
          module_name="${{ steps.module-info.outputs.module_name }}"
          new_filename="${module_name}-${filename}"
          cp "$jar" "release-assets/$new_filename"
        done
        
        # List files for verification
        ls -la release-assets/

    - name: Get release tag for this module
      id: get-tag
      run: |
        # The tag should be in format: java-sdk/{module-path}-v{version}
        MODULE_PATH_NO_PREFIX="${{ steps.module-info.outputs.module_path_no_prefix }}"
        # Look for the most recent tag for this module
        TAG=$(git tag --sort=-version:refname | grep "^java-sdk/${MODULE_PATH_NO_PREFIX}-v" | head -n1)
        echo "tag_name=$TAG" >> $GITHUB_OUTPUT
        echo "Found tag: $TAG"

    - name: Upload Release Assets
      if: ${{ steps.get-tag.outputs.tag_name != '' }}
      uses: softprops/action-gh-release@v2
      with:
        tag_name: ${{ steps.get-tag.outputs.tag_name }}
        files: release-assets/*.jar
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} Refactoring","hidden":false},
              {"type":"perf","section":"Performance Improvements","hidden":false},
              {"type":"test","section":"Tests","hidden":true},
              {"type":"build","section":"Build System","hidden":true},
              {"type":"ci","section":"Continuous Integration","hidden":true},
              {"type":"chore","section":"Miscellaneous","hidden":true},
              {"type":"revert","section":"Reverts","hidden":false}
            ]

  # Job to publish packages when a release is created
  publish-packages:
    needs: release-please
    if: ${{ needs.release-please.outputs.releases_created == 'true' }}
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'

    - name: Cache Maven dependencies
      uses: actions/cache@v4
      with:
        path: ~/.m2
        key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
        restore-keys: ${{ runner.os }}-m2

    - name: Configure Maven settings for GitHub Packages
      run: |
        mkdir -p ~/.m2
        cat > ~/.m2/settings.xml << EOF
        <?xml version="1.0" encoding="UTF-8"?>
        <settings xmlns="http://maven.apache.org/SETTINGS/1.0.0"
                  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
                  xsi:schemaLocation="http://maven.apache.org/SETTINGS/1.0.0
                                      http://maven.apache.org/xsd/settings-1.0.0.xsd">
          <servers>
            <server>
              <id>github</id>
              <username>\${env.GITHUB_ACTOR}</username>
              <password>\${env.GITHUB_TOKEN}</password>
            </server>
          </servers>
        </settings>
        EOF

    - name: Run tests
      run: mvn clean test

    - name: Build and publish packages
      run: mvn clean deploy -DskipTests -Denv.CI=true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        GITHUB_ACTOR: ${{ github.actor }}

    - name: Create GitHub Release Assets
      if: ${{ needs.release-please.outputs.releases_created == 'true' }}
      run: |
        # Create a directory for release assets
        mkdir -p release-assets
        
        # Copy built JARs to release assets
        find . -name "*.jar" -not -path "*/target/surefire-reports/*" -not -path "*/examples/*" | while read jar; do
          cp "$jar" release-assets/
        done
        
        # List files for verification
        ls -la release-assets/

    - name: Upload Release Assets
      if: ${{ needs.release-please.outputs.releases_created == 'true' }}
      uses: softprops/action-gh-release@v2
      with:
        tag_name: ${{ needs.release-please.outputs.tag_name }}
        files: release-assets/*.jar
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}